How to build this app.

1. sc-init ImageSearch
2. cd image_search
3. sc-gen model ImageSearch.GoogleImage
   --> Fixture and model files have been created.
4. Edit models/google_image.js:

    ImageSearch.GoogleImage = SC.Record.extend(
    /** @scope ImageSearch.GoogleImage.prototype */ {
        primaryKey: "imageId",
      
        content: SC.Record.attr(String),
        contentNoFormatting: SC.Record.attr(String),
        height: SC.Record.attr(Number),
        imageId: SC.Record.attr(String),
        originalContextUrl: SC.Record.attr(String),
        tbHeight: SC.Record.attr(Number),
        tbUrl: SC.Record.attr(String),
        tbWidth: SC.Record.attr(Number),
        title: SC.Record.attr(String),
        titleNoFormatting: SC.Record.attr(String),
        unescapedUrl: SC.Record.attr(String),
        url: SC.Record.attr(String),
        visibleUrl: SC.Record.attr(String),
        width: SC.Record.attr(Number)
    }) ;
       
5. Put this into the apps/image_search/fixtures/google_image.js file:

    ImageSearch.GoogleImage.FIXTURES = [

      // TODO: Add your data fixtures here.
      // All fixture records must have a unique primary key (default 'guid').  See 
      // the example below.

      {
          "content": "<b>Ren</b> &amp; <b>Stimpy</b> information",
          "contentNoFormatting": "Ren &amp; Stimpy information",
          "height": 474,
          "imageId": "WttpFfB1sW1z1M:",
          "originalContextUrl": "http://www.lysator.liu.se/~marcus/ren_stimpy/",
          "tbHeight": 103,
          "tbUrl": "http://images.google.com/images?q=tbn:WttpFfB1sW1z1M::www.lysator.liu.se/~marcus/ren_stimpy/Ren_and_Stimpy-opening-3.jpg",
          "tbWidth": 136,
          "title": "<b>Ren</b> &amp, <b>Stimpy</b> Mainpage",
          "titleNoFormatting": "Ren &amp, Stimpy Mainpage",
          "unescapedUrl": "http://www.lysator.liu.se/~marcus/ren_stimpy/Ren_and_Stimpy-opening-3.jpg",
          "url": "http://www.lysator.liu.se/~marcus/ren_stimpy/Ren_and_Stimpy-opening-3.jpg",
          "visibleUrl": "www.lysator.liu.se",
          "width": 626,
      },  
          {
          "content": "<b>ren</b> and <b>stimpy</b>",
          "contentNoFormatting": "ren and stimpy",
          "height": 375,
          "imageId": "2lbOrNv0W6qVpM:",
          "originalContextUrl": "http://board.muse.mu/album.php?albumid=745&pictureid=7202",
          "tbHeight": 98,
          "tbUrl": "http://images.google.com/images?q=tbn:2lbOrNv0W6qVpM::board.muse.mu/picture.php%3Falbumid%3D745%26pictureid%3D7202",
          "tbWidth": 130,
          "title": "Muse Messageboard - TwistedGirly&#39;s Album: What&#39;s That Coming Over <b>...</b>",
          "titleNoFormatting": "Muse Messageboard - TwistedGirly&#39;s Album: What&#39;s That Coming Over ...",
          "unescapedUrl": "http://board.muse.mu/picture.php?albumid=745&pictureid=7202",
          "url": "http://board.muse.mu/picture.php%3Falbumid%3D745%26pictureid%3D7202",
          "visibleUrl": "board.muse.mu",
          "width": 500,
      },  
          {
          "content": "Even <b>Ren</b> and <b>Stimpy</b>",
          "contentNoFormatting": "Even Ren and Stimpy",
          "height": 300,
          "imageId": "Xil_WiiiI0YrlM:",
          "originalContextUrl": "http://www.amiright.com/album-covers/abbey-road-parodies/",
          "tbHeight": 116,
          "tbUrl": "http://images.google.com/images?q=tbn:Xil_WiiiI0YrlM::www.amiright.com/album-covers/images/album-Ren--Stimpy-You-Eediot.jpg",
          "tbWidth": 116,
          "title": "The Beatles: Abbey Road Album Cover Parodies",
          "titleNoFormatting": "The Beatles: Abbey Road Album Cover Parodies",
          "unescapedUrl": "http://www.amiright.com/album-covers/images/album-Ren--Stimpy-You-Eediot.jpg",
          "url": "http://www.amiright.com/album-covers/images/album-Ren--Stimpy-You-Eediot.jpg",
          "visibleUrl": "www.amiright.com",
          "width": 300,
      },  
          {   
          "content": "<b>Ren</b> and <b>Stimpy</b> Picture &amp; Photo",
          "contentNoFormatting": "Ren and Stimpy Picture &amp; Photo",
          "height": 356,
          "imageId": "LwYZSscEjrx-9M:",
          "originalContextUrl": "http://www.starpulse.com/Television/Ren_and_Stimpy/gallery/Ren-Stimpy-tv-02/",
          "tbHeight": 102,
          "tbUrl": "http://images.google.com/images?q=tbn:LwYZSscEjrx-9M::images.starpulse.com/Photos/Previews/Ren-Stimpy-tv-02.jpg",
          "tbWidth": 127,
          "title": "<b>Ren</b> and <b>Stimpy</b> Pictures &amp, Photos - <b>Ren</b> and <b>Stimpy</b>",
          "titleNoFormatting": "Ren and Stimpy Pictures &amp, Photos - Ren and Stimpy",
          "unescapedUrl": "http://images.starpulse.com/Photos/Previews/Ren-Stimpy-tv-02.jpg",
          "url": "http://images.starpulse.com/Photos/Previews/Ren-Stimpy-tv-02.jpg",
          "visibleUrl": "www.starpulse.com",
          "width": 445,
      },  
          {    
          "content": "<b>ren</b> and <b>stimpy</b>",
          "contentNoFormatting": "ren and stimpy",
          "height": 768,
          "imageId": "M03V2-yBHsEV1M:",
          "originalContextUrl": "http://www.fwallpapers.net/ren-and-stimpy.html",
          "tbHeight": 113,
          "tbUrl": "http://images.google.com/images?q=tbn:M03V2-yBHsEV1M::www.fwallpapers.net/pics/cartoons/ren-and-stimpy/ren-and-stimpy_000.jpg",
          "tbWidth": 150,
          "title": "<b>ren</b> and <b>stimpy</b> free desktop wallpapers | <b>stimpy</b>",
          "titleNoFormatting": "ren and stimpy free desktop wallpapers | stimpy",
          "unescapedUrl": "http://www.fwallpapers.net/pics/cartoons/ren-and-stimpy/ren-and-stimpy_000.jpg",
          "url": "http://www.fwallpapers.net/pics/cartoons/ren-and-stimpy/ren-and-stimpy_000.jpg",
          "visibleUrl": "www.fwallpapers.net",
          "width": 1024,
      },  
          {   
          "content": "<b>Ren</b> and <b>Stimpy</b>",
          "contentNoFormatting": "Ren and Stimpy",
          "height": 274,
          "imageId": "srgpBZbW_-_zhM:",
          "originalContextUrl": "http://blog.nomans.us/2006/05/18/day-16-post-aclr--mental-illness-components.aspx",
          "tbHeight": 92,
          "tbUrl": "http://images.google.com/images?q=tbn:srgpBZbW_-_zhM::images.quickblogcast.com/20244-19309/animation_ren_stimpy1.gif",
          "tbWidth": 121,
          "title": "Fishing For Life",
          "titleNoFormatting": "Fishing For Life",
          "unescapedUrl": "http://images.quickblogcast.com/20244-19309/animation_ren_stimpy1.gif",
          "url": "http://images.quickblogcast.com/20244-19309/animation_ren_stimpy1.gif",
          "visibleUrl": "blog.nomans.us",
          "width": 360,
      },  
          {    
          "content": "<b>Ren</b> and <b>Stimpy</b> music",
          "contentNoFormatting": "Ren and Stimpy music",
          "height": 268,
          "imageId": "BrfplJdysM7JnM:",
          "originalContextUrl": "http://www.diversionprojects.org/index.php?m=05&y=07&entry=entry070531-145138",
          "tbHeight": 83,
          "tbUrl": "http://images.google.com/images?q=tbn:BrfplJdysM7JnM::www.diversionprojects.org/images/Ren_and_Stimpy_Radio.jpg",
          "tbWidth": 124,
          "title": "Diversion Projects - <b>Ren</b> and <b>Stimpy</b> music",
          "titleNoFormatting": "Diversion Projects - Ren and Stimpy music",
          "unescapedUrl": "http://www.diversionprojects.org/images/Ren_and_Stimpy_Radio.jpg",
          "url": "http://www.diversionprojects.org/images/Ren_and_Stimpy_Radio.jpg",
          "visibleUrl": "www.diversionprojects.org",
          "width": 400,
      },  
          {
          "content": "<b>Ren</b> and <b>Stimpy</b>",
          "contentNoFormatting": "Ren and Stimpy",
          "height": 1024,
          "imageId": "JIa4gsLBX1cAkM:",
          "originalContextUrl": "http://www.fanpop.com/spots/ren-and-stimpy/images/121962/title/ren-stimpy-photo",
          "tbHeight": 150,
          "tbUrl": "http://images.google.com/images?q=tbn:JIa4gsLBX1cAkM::images.fanpop.com/images/image_uploads/Ren-and-Stimpy-ren-and-stimpy-121962_663_1024.jpg",
          "tbWidth": 97,
          "title": "<b>Ren</b> and <b>Stimpy</b> - <b>Ren</b> and <b>Stimpy</b> Photo (121962) - Fanpop",
          "titleNoFormatting": "Ren and Stimpy - Ren and Stimpy Photo (121962) - Fanpop",
          "unescapedUrl": "http://images.fanpop.com/images/image_uploads/Ren-and-Stimpy-ren-and-stimpy-121962_663_1024.jpg",
          "url": "http://images.fanpop.com/images/image_uploads/Ren-and-Stimpy-ren-and-stimpy-121962_663_1024.jpg",
          "visibleUrl": "www.fanpop.com",
          "width": 663,
      }

    ];
    
6. Open the app in the browser and type this in the JS console:
    ImageSearch.store.find(ImageSearch.GoogleImage).getEach('tbUrl');
    
    You should see a list of the fixture thumbnail URLs. Great.
    
7. sc-gen controller ImageSearch.imagesController SC.ArrayController
8. Edit controllers/images.js:
    searchTerm: null,

    summary: function() {
      var len = this.get('length'), ret ;

      if (len && len > 0) {
        ret = len === 1 ? "1 image" : "%@ images".fmt(len);
      } else ret = "No images";

      return ret;
    }.property('length').cacheable(),
    
9. Add this to main.js to load the fixtures into the controller:

    var query = SC.Query.local(ImageSearch.GoogleImage);
    var images = ImageSearch.store.find(query);
    ImageSearch.imagesController.set('content', images);
    
10. Open the app in the browser again and type this:
    ImageSearch.imagesController.summary();
    It should say "8 images"
    
11. Build the basic UI by making resources/main_page.js look like this:

    ImageSearch.mainPage = SC.Page.design({

      // The main pane is made visible on screen as soon as your app is loaded.
      // Add childViews to this pane for views to display immediately on page 
      // load.
      mainPane: SC.MainPane.design({
          childViews: 'middleView topView bottomView'.w(),

          topView: SC.ToolbarView.design({
            layout: { top: 0, left: 0, right: 0, height: 36 },
            childViews: 'labelView'.w(),
            anchorLocation: SC.ANCHOR_TOP,
            labelView: SC.LabelView.design({
              layout: { centerY: 0, height: 24, left: 8, right: 8 },
              controlSize: SC.LARGE_CONTROL_SIZE,
              fontWeight: SC.BOLD_WEIGHT,
              value: "Title",
              escapeHTML: NO
            })
          }),

          middleView: SC.SplitView.design({
            layout: { left: 0, top: 36, right: 0, bottom: 32 },
            layoutDirection: SC.LAYOUT_HORIZONTAL,
            autoresizeBehavior: SC.RESIZE_BOTTOM_RIGHT,
            defaultThickness: 0.8,
            //The list view is nested into the scrollview which is now in the splitview.
            topLeftView: SC.View.design({
              layout: { top: 36, bottom: 32, width: 200 },
              childViews: 'scrollView'.w(),
          
              scrollView: SC.ScrollView.design({
                hasHorizontalScroller: NO,
                layout: { top: 28, bottom: 0, left: 5, right: 5 },
                backgroundColor: 'white',
                //Here is the original list view, which is bound to the tasksController
                contentView: SC.ListView.design({
                  contentBinding: 'ImageSearch.imagesController.arrangedObjects',
                  selectionBinding: 'ImageSearch.imagesController.selection',
                  contentValueKey: "content",
                  contentIconKey: "tbUrl",
                  exampleView: SC.ImageView,
                  hasContentIcon:  YES,
                  escapeHTML: NO,
                  rowHeight: 70,
                })
              })
            }),
            topLeftMaxThickness: 250,
            dividerView: SC.SplitDividerView.design({
                layout: {}
            }),
            //This view shows up on the right. It is a placeholder, later we will use a formview.
            bottomRightView: SC.ScrollView.design({
              layout: { left: 5, top: 36, right: 5, bottom: 32 },
              horizontalAlign: SC.ALIGN_CENTER,
              verticalAlign: SC.ALIGN_CENTER,
              canScale: YES,
              contentView: SC.ImageView.design({
                  layout: { left: 0, top: 0, right: 0, bottom: 0 },
              })
            })
          }),

          bottomView: SC.ToolbarView.design({
            layout: { bottom: 0, left: 0, right: 0, height: 32 },
            anchorLocation: SC.ANCHOR_BOTTOM
          })
        })

    });
    
12. Open it in the browser, you should see a list of the images on the left. But they are ugly.

13. sc-gen view ImageSearch.ImageThumbListItemView
14. Make views/image_thumb_list_item.js look like this:

  ImageSearch.ImageThumbListItemView = SC.ListItemView.extend(
  /** @scope ImageSearch.ImageThumbListItemView.prototype */ {

    escapeHTML: NO,

    classNames: ['sc-list-item-view'],

  });
  
15. Add a file called style.css to the resources directory with this contents:
  .sc-list-item-view.has-icon label {
    left: 75px;
  }

  .sc-list-item-view img.icon {
    max-width: 60px;
    max-height: 60px;
    top: 25%;
  }
  
16. Change the exampleView property of the scrollView in main_page.js to this:
  exampleView: ImageSearch.ImageThumbListItemView
  
17. reload the app. The list should look much nicer.

18. Now we want to display the selected image on the right. For that we need an object controller.

19. Edit controllers/current_image.js with this property:
    contentBinding: SC.Binding.single('ImageSearch.imagesController.selection'),
    
20. Add this line to the bottomRightView's contentView in main_page.js:
    valueBinding: "ImageSearch.currentImageController.unescapedUrl"
    
21. Reload the app. You should be able to see the big picture (no pun intended).

22. Our basic app is working. But now we want to be able to perform actual searches. Let's add a textfield.
    In main_page.js, replace the middleView's childViews line with this:
    
    childViews: 'textField scrollView'.w(),
    textField: SC.TextFieldView.design({
      layout: { top: 2, height: 24, left: 5, right: 5 },
      controlSize: SC.LARGE_CONTROL_SIZE,
      fontWeight: SC.BOLD_WEIGHT,
      hint: 'type your search here',
      valueBinding: 'ImageSearch.imagesController.searchTerm',
      target: "ImageSearch.imagesController",
      action: "performSearch",
      keyDown: function(evt) {
        sc_super(); // necessary to guarantee regular handling of keyDown events, 
                     // want to avoid that this overwrite messes everything up     	   
        if (evt.keyCode === 13) {
          // trigger the search after we've seen an "enter"
          ImageSearch.imagesController.performSearch(); 
          return YES;
        } else {
          return NO;
        }
      }}),
      
23. Let's define the performSearch method in controllers/images.js next:

  performSearch: function() {    
    console.log("Searching for: " + this.get('searchTerm'));
  },
  
24. Run your app, type something in the search box, press return and watch the console.

25. But we want to search Google Images. For that, we need a datasource.
    sc-gen data-source ImageSearch.GoogleImageDataSource
    
26. Change it's fetch method to look like this:

    fetch: function(store, query, params) {
      console.log('in fetch');
      SC.Request.getUrl('ajax/services/search/images?v=1.0&rsz=large&imgtype=photo&q='+query.query).json()
        .notify(this, 'didFetchImages', store, query)
        .send();
      return YES;
    },

    didFetchImages: function(response, store, query) {
      console.log('in didfetch');
      var data;
      if (SC.ok(response)) {
        data = response.get('body').responseData.results;

        console.log(data);



        var storeKeys = store.loadRecords(ImageSearch.GoogleImage, data);
        store.loadQueryResults(query, storeKeys);

        store.dataSourceDidFetchQuery(query);
      } 
      else store.dataSourceDidErrorQuery(query, response);
    },
    
27. We need to add a proxy to Buildfile:
  proxy '/ajax/services/search/images', :to =>'ajax.googleapis.com'
  
28. Finally we need to change the DataStore's source to the new data source.
  in main.js:
    var query = SC.Query.remote(ImageSearch.GoogleImage, {query: 'ren and stimpy'});
    var images = ImageSearch.store.find(query);
    ImageSearch.imagesController.set('content', images);
    
29. change the performSearch method:

  performSearch: function() {    
    var imageQuery = SC.Query.remote(ImageSearch.GoogleImage, {query: this.get('searchTerm')});
    var images = ImageSearch.store.find(imageQuery);
    
    ImageSearch.imagesController.set('content', images);
  },
  
30. in core.js:

  store: SC.Store.create({
    commitRecordsAutomatically: YES
  }).from('ImageSearch.GoogleImageDataSource')
  
31. restart sc-server, reload the app

    
    
    
  
  



    
